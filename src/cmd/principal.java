/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cmd;

import java.awt.event.KeyEvent;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Alejandro
 */
public class principal extends javax.swing.JFrame {

    /**
     * Creates new form principal
     */
    
    private String rutaActual;
    
    public principal() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        File tmp = new File("Z/Alex");
        
        rutaActual = tmp.getPath() + ">";
        content.setText(rutaActual);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        content = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        content.setColumns(20);
        content.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        content.setForeground(new java.awt.Color(153, 0, 153));
        content.setRows(5);
        content.setBorder(javax.swing.BorderFactory.createMatteBorder(10, 5, 10, 5, new java.awt.Color(255, 255, 255)));
        content.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                contentKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                contentKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(content);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 470));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 470));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void contentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contentKeyReleased
        // TODO add your handling code here:


    }//GEN-LAST:event_contentKeyReleased

    private void contentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contentKeyPressed
        // TODO add your handling code here:

        //obtener la ultima linea
        int lineas = content.getLineCount();

        System.out.println(lineas);
        try {
            int indiceFinal = content.getLineEndOffset(lineas-1);
            
            String text = content.getText();

            String ultimaLinea = text.substring(content.getLineStartOffset(lineas-1), indiceFinal);

            System.out.println(ultimaLinea);
            /*
            Valida que cuando presione el BackSpace no borre mas alla de la ruta
             */
            if (ultimaLinea.length() <= rutaActual.length() && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                evt.consume();
            }

            //Ejecucion de los comandos
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                String command = ultimaLinea.split(">")[1];

                String[] tokens = command.split(" ");

                String nombreCarpeta = tokens[0];

                switch (tokens[0]) {
                    case "mkdir" -> {
                        nombreCarpeta = tokens[1];

                        File nuevaCarpeta = new File(nombreCarpeta);
                        if (nuevaCarpeta.mkdir()) {
                            content.append("\nCarpeta creada: " + nuevaCarpeta.getName() + "\n");
                        } else {
                            content.append("\nError al crear la carpeta");
                        }
                    }

                    case "rm" -> {
                        nombreCarpeta = tokens[1];

                        File carpetaAEliminar = new File(nombreCarpeta);
                        if (carpetaAEliminar.delete()) {
                            content.append("\nCarpeta eliminada: " + carpetaAEliminar.getAbsolutePath() + "\n");
                        } else {
                            content.append("\nError al eliminar la carpeta\n");
                        }
                    }
                    case "cd" -> {
                        nombreCarpeta = tokens[1];

                        File carpetaACambiar = new File(nombreCarpeta);
                        if (carpetaACambiar.isDirectory()) {
                            System.setProperty("user.dir", carpetaACambiar.getAbsolutePath());
                            content.append("\nCarpeta actual: " + carpetaACambiar.getAbsolutePath() + "\n");
                        } else {
                            content.append("\nError: " + nombreCarpeta + " no es una carpeta\n");
                        }
                    }
                    case "cd.." -> {
                        File carpetaAnterior = new File(System.getProperty("user.dir")).getParentFile();
                        System.setProperty("user.dir", carpetaAnterior.getAbsolutePath());
                        content.append("\nCarpeta actual: " + carpetaAnterior.getAbsolutePath() + "\n");
                    }
                    case "dir" -> {
                        File carpetaActual = new File(System.getProperty("user.dir"));
                        File[] archivos = carpetaActual.listFiles();
                        for (File archivo : archivos) {
                            if (archivo.isDirectory()) {
                                content.append(archivo.getName() + "\n");
                            } else {
                                content.append(archivo.getName() + "\n");
                            }
                        }
                    }
                    case "date" -> {
                        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
                        Date date = new Date();
                        content.append("\nFecha actual: " + dateFormat.format(date) + "\n");
                    }
                    case "time" -> {
                        DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
                        Date time = new Date();
                        content.append("\nHora actual: " + timeFormat.format(time) + "\n");
                    }
                    default ->
                        content.append("\nError: comando desconocido\n");
                }

                content.setText(content.getText() + rutaActual.substring(0,rutaActual.length()));

            }

        } catch (BadLocationException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }



    }//GEN-LAST:event_contentKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea content;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
